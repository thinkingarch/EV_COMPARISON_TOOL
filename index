<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EV Comparison Tool</title>
    <script src="https://cdn.tailwindcss.com"></script>  <script src="https://unpkg.com/react@18/umd/react.development.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js" crossorigin></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>  <script src="https://unpkg.com/recharts@2/umd/Recharts.min.js" crossorigin></script>  </head>
<body class="bg-gray-100">
    <div id="root" class="p-4"></div>

    <script type="text/babel">

    const { useState, useEffect } = React;
    const { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } = Recharts;


    function EVComparisonModel() {
        // Initial vehicle data
        const initialVehicles = [
            { name: "RENAULT MÃ©gane E-TECH", price: 23900, registration: "01.2023", mileage: 36000, range: 480, weight: 1762, batteryCapacity: 60.0 },
            { name: "VW ID.3 Pro Performance", price: 20900, registration: "02.2021", mileage: 24000, range: 420, weight: 1805, batteryCapacity: 58.0 },
            { name: "AIWAYS U5 Premium", price: 19750, registration: "03.2022", mileage: 40000, range: 400, weight: 1845, batteryCapacity: 63.0 },
            { name: "HYUNDAI Kona EV", price: 16000, registration: "11.2020", mileage: 92000, range: 484, weight: 1818, batteryCapacity: 64.0 },
            { name: "KGM-SsangYong E-Motion", price: 20900, registration: "02.2024", mileage: 18500, range: 339, weight: 1897, batteryCapacity: 61.5 },
            { name: "BMW i3 Fleet Edition", price: 17490, registration: "10.2020", mileage: 49500, range: 285, weight: 1428, batteryCapacity: 37.9 },
            { name: "BMW i3", price: 15000, registration: "02.2019", mileage: 60000, range: 285, weight: 1428, batteryCapacity: 37.9 },
            { name: "KIA e Niro", price: 25900, registration: "03.2021", mileage: 36000, range: 455, weight: 1866, batteryCapacity: 64.0 },
            { name: "CITROEN C4 Electric", price: 17900, registration: "10.2021", mileage: 2800, range: 350, weight: 1694, batteryCapacity: 50.0 },
            { name: "RENAULT Zoe", price: 15500, registration: "11.2021", mileage: 12900, range: 360, weight: 1638, batteryCapacity: 52.0 }
        ];

        // State
        const [vehicles, setVehicles] = useState(initialVehicles);  // Not directly used after initialization, but good practice to keep
        const [weights, setWeights] = useState({ price: 1.0, age: 1.0, mileage: 1.0, range: 1.0, weight: 1.0, batteryCapacity: 1.0 });
        const [minDifference, setMinDifference] = useState(5);
        const [results, setResults] = useState([]);
        const [chartData, setChartData] = useState([]);

        // Helper function to calculate vehicle age in months
        const calculateAgeInMonths = (registrationDate) => {
            const [day, month, year] = registrationDate.split('.'); // Destructure directly
            const regDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
            const currentDate = new Date(2025, 2, 24); // March 24, 2025
            return (currentDate.getFullYear() - regDate.getFullYear()) * 12 + (currentDate.getMonth() - regDate.getMonth());
        };

        // Calculate scores
        const calculateScores = () => {
          const vehiclesWithAge = vehicles.map(vehicle => ({
              ...vehicle,
              ageMonths: calculateAgeInMonths(vehicle.registration)
          }));

          const lowestPrice = Math.min(...vehiclesWithAge.map(v => v.price));
          const newestVehicle = Math.min(...vehiclesWithAge.map(v => v.ageMonths));
          const lowestMileage = Math.min(...vehiclesWithAge.map(v => v.mileage));
          const highestRange = Math.max(...vehiclesWithAge.map(v => v.range));
          const lowestWeight = Math.min(...vehiclesWithAge.map(v => v.weight));
          const highestBatteryCapacity = Math.max(...vehiclesWithAge.map(v => v.batteryCapacity));

          const scoredVehicles = vehiclesWithAge.map(vehicle => {
            const priceScore = (lowestPrice / vehicle.price) * 100;
            const ageScore = (newestVehicle / vehicle.ageMonths) * 100;
            const mileageScore = (lowestMileage / vehicle.mileage) * 100;
            const rangeScore = (vehicle.range / highestRange) * 100;
            const weightScore = (lowestWeight / vehicle.weight) * 100;
            const batteryScore = (vehicle.batteryCapacity / highestBatteryCapacity) * 100;

            const totalWeight = Object.values(weights).reduce((acc, val) => acc + val, 0); // More robust way to sum weights
            const weightedScore = (
                weights.price * priceScore +
                weights.age * ageScore +
                weights.mileage * mileageScore +
                weights.range * rangeScore +
                weights.weight * weightScore +
                weights.batteryCapacity * batteryScore
            ) / totalWeight;

              return {
                  ...vehicle,
                  scores: { price: priceScore, age: ageScore, mileage: mileageScore, range: rangeScore, weight: weightScore, batteryCapacity: batteryScore },
                  weightedScore
              };
          });

            // Sort by weighted score *before* filtering
            const sortedVehicles = [...scoredVehicles].sort((a, b) => b.weightedScore - a.weightedScore);

          // Apply minimum difference filter.  This logic is correct.
            const filteredResults = [];
            sortedVehicles.forEach((vehicle, index) => {
                if (index === 0) {
                    filteredResults.push(vehicle);
                } else {
                    const prevScore = filteredResults[filteredResults.length - 1].weightedScore;
                    if ((prevScore - vehicle.weightedScore) / prevScore * 100 >= minDifference) {
                        filteredResults.push(vehicle);
                    }
                }
            });

            const chartData = filteredResults.map(vehicle => ({ // Use filteredResults for the chart too
                name: vehicle.name,
                Price: parseFloat(vehicle.scores.price.toFixed(1)),
                Age: parseFloat(vehicle.scores.age.toFixed(1)),
                Mileage: parseFloat(vehicle.scores.mileage.toFixed(1)),
                Range: parseFloat(vehicle.scores.range.toFixed(1)),
                Weight: parseFloat(vehicle.scores.weight.toFixed(1)),
                'Battery Capacity': parseFloat(vehicle.scores.batteryCapacity.toFixed(1)),
                Overall: parseFloat(vehicle.weightedScore.toFixed(1))
            }));

            setResults(filteredResults);  // Show the *filtered* results
            setChartData(chartData);
        };


        // Calculate scores on weight/minDifference change
        useEffect(() => {
            calculateScores();
        }, [weights, minDifference, vehicles]); // Include 'vehicles' in the dependency array


        const handleWeightChange = (feature, value) => {
            setWeights({ ...weights, [feature]: parseFloat(value) });
        };



        return (
          <div className="p-4 max-w-full">
            <h1 className="text-2xl font-bold mb-4">Electric Vehicle Comparison Model</h1>
            <div className="mb-6 bg-gray-100 p-4 rounded">
              <h2 className="text-lg font-semibold mb-2">Feature Importance Weights</h2>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                {/*  Weight controls.  Looping is more concise: */}
                {['price', 'age', 'mileage', 'range', 'weight', 'batteryCapacity'].map(feature => (
                    <div key={feature}>
                        <label className="block text-sm font-medium text-gray-700">{feature.charAt(0).toUpperCase() + feature.slice(1)} Weight</label>
                        <input
                            type="range"
                            min="0"
                            max="2"
                            step="0.1"
                            value={weights[feature]}
                            onChange={(e) => handleWeightChange(feature, e.target.value)}
                            className="w-full"
                        />
                        <span className="text-sm">{weights[feature]}</span>
                    </div>
                ))}
              </div>

              {/* Minimum Difference */}
              <div className="mt-4">
                <label className="block text-sm font-medium text-gray-700">Minimum Difference (%)</label>
                <input
                  type="range"
                  min="1"
                  max="20"
                  step="1"
                  value={minDifference}
                  onChange={(e) => setMinDifference(parseInt(e.target.value))}
                  className="w-full max-w-md"
                />
                <span className="text-sm">{minDifference}%</span>
              </div>
            </div>

            {/* Results Table */}
            <div className="mb-6 overflow-x-auto">
              <h2 className="text-lg font-semibold mb-2">Vehicle Rankings</h2>
              <table className="min-w-full bg-white border border-gray-300">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="py-2 px-3 border">Rank</th>
                    <th className="py-2 px-3 border">Vehicle</th>
                    <th className="py-2 px-3 border">Overall</th>
                    <th className="py-2 px-3 border">Price</th>
                    <th className="py-2 px-3 border">Age</th>
                    <th className="py-2 px-3 border">Mileage</th>
                    <th className="py-2 px-3 border">Range</th>
                    <th className="py-2 px-3 border">Weight</th>
                    <th className="py-2 px-3 border">Battery</th>
                  </tr>
                </thead>
                <tbody>
                  {results.map((vehicle, index) => (
                    <tr key={index} className={index < 3 ? "bg-green-50" : ""}>
                      <td className="py-2 px-3 border font-bold">{index + 1}</td>
                      <td className="py-2 px-3 border">{vehicle.name}</td>
                      <td className="py-2 px-3 border font-semibold">{vehicle.weightedScore.toFixed(1)}%</td>
                      <td className="py-2 px-3 border">{vehicle.scores.price.toFixed(1)}%</td>
                      <td className="py-2 px-3 border">{vehicle.scores.age.toFixed(1)}%</td>
                      <td className="py-2 px-3 border">{vehicle.scores.mileage.toFixed(1)}%</td>
                      <td className="py-2 px-3 border">{vehicle.scores.range.toFixed(1)}%</td>
                      <td className="py-2 px-3 border">{vehicle.scores.weight.toFixed(1)}%</td>
                      <td className="py-2 px-3 border">{vehicle.scores.batteryCapacity.toFixed(1)}%</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {/* Visualization */}
            <div className="mb-6">
              <h2 className="text-lg font-semibold mb-2">Score Visualization</h2>
              <div className="h-96">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart
                    data={chartData}
                    margin={{ top: 20, right: 30, left: 20, bottom: 120 }}
                  >
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" angle={-45} textAnchor="end" height={80} />
                    <YAxis label={{ value: 'Score (%)', angle: -90, position: 'insideLeft' }} />
                    <Tooltip formatter={(value) => value.toFixed(1) + '%'} />
                    <Legend verticalAlign="top" />
                    {/*  Use consistent naming for the bars: */}
                    <Bar dataKey="Overall" fill="#8884d8" name="Overall" />
                    <Bar dataKey="Price" fill="#82ca9d" name="Price" />
                    <Bar dataKey="Age" fill="#ffc658" name="Age" />
                    <Bar dataKey="Mileage" fill="#ff8042" name="Mileage" />
                    <Bar dataKey="Range" fill="#0088fe" name="Range" />
                    <Bar dataKey="Weight" fill="#00C49F" name="Weight" />
                    <Bar dataKey="Battery Capacity" fill="#FFBB28" name="Battery Capacity" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </div>

            {/* Top 3 Recommendations */}
            <div className="mb-6">
              <h2 className="text-lg font-semibold mb-2">Top 3 Recommendations</h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {results.slice(0, 3).map((vehicle, index) => (
                  <div key={index} className="border rounded p-4 bg-white shadow">
                    <h3 className="font-bold text-lg">{index + 1}. {vehicle.name}</h3>
                    <p className="text-xl font-semibold text-green-600">{vehicle.weightedScore.toFixed(1)}% Overall</p>
                    <div className="mt-2">
                      <p>Price: {vehicle.price} CHF ({vehicle.scores.price.toFixed(1)}%)</p>
                      <p>Registration: {vehicle.registration} ({vehicle.scores.age.toFixed(1)}%)</p>
                      <p>Mileage: {vehicle.mileage} km ({vehicle.scores.mileage.toFixed(1)}%)</p>
                      <p>Range: {vehicle.range} km ({vehicle.scores.range.toFixed(1)}%)</p>
                      <p>Weight: {vehicle.weight} kg ({vehicle.scores.weight.toFixed(1)}%)</p>
                      <p>Battery: {vehicle.batteryCapacity} kWh ({vehicle.scores.batteryCapacity.toFixed(1)}%)</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );
    }

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<EVComparisonModel />);
    </script>
</body>
</html>
